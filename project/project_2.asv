clear all; close all;

% Since IP and MAC has to be unique, I used randperm instead of randi
IP = randperm(2^32, 1000) - 1; %total 2^32 combinations, I take 1000 of them 
MAC = randperm(2^48, 1000) - 1;%total 2^48 combinations, I take 1000 of them 

% build a cache table
IP_MAC = [IP(:), MAC(:)];
[ip_r, ip_c] = size(IP);
% in this hash table simulation, I ignore the time it takes for populating
% the table




% building the cache table
A = 0.6; % parameter of multiplication hash function
m = 1000; % size of table

cache_table = zeros(m, 2);


for i = 1:ip_c
    index = floor((mod(A*IP(i), 1)) * m ) + 1; % I +1 here to avoid "Index in position 1 is invalid. Array indices must be
    if index > m
        index = index - m;
    end                                                %positive integers or logical values."
    %increment = 0;
    % using linear probing method
    while cache_table(index, 1) ~= 0
        index = index + 1;
        if (index) > m
            index = 1;
            
        end
    end
    
    cache_table(index, 1) = IP_MAC(i, 1);
    cache_table(index, 2) = IP_MAC(i, 2);
end

%     % using linear probing method
%     while flag == 0  % this means not yet been assigned  
%         if cache_table(index + increment, 1) == 0
%             cache_table(index + increment, 1) = IP_MAC(i, 1);
%             cache_table(index + increment, 2) = IP_MAC(i, 2);
%         else
%             cache_table(index + increment + 1, 1) = IP_MAC(i, 1);
%             cache_table(index + increment + 1, 2) = IP_MAC(i, 2);
% 
%         end
%         increment = increment + 1;
% 
%     end
% 
% 
% end

% number of lookups
n = 10000;
test_ips_index = randi(ip_c, 1, n); % can be searching for same ip multiple times
test_ips = IP(test_ips_index);
hit = zeros(1, n);
miss = zeros(1, n);

%0.6180339887;

tic
for i = 1:n
    test_ip = test_ips(i);
    search_index = floor((mod(A*test_ip, 1)) * m ) + 1;
    if search_index > m
        search_index = search_index - m;
    end
    while cache_table(search_index, 1) ~= test_ip
        search_index = search_index + 1;
        miss(1, i) = miss(1, i) + 1;
        if search_index > m
            search_index = 1;
        end
        
    end
    if cache_table(search_index, 1) == test_ip
        %fprintf("ip index: %d found ", ind)
        if miss(1, i) == 0
            hit(1, i) = hit(1, i) + 1;
        end
    else
        printf("sth else wrong\n")
    end
    

   % if cache_table(search_index) == IP(ind)  % then w found the correct one
end
total_time = toc;
ave_time = total_time / n;

fprintf('Cache size: %d entries\n', m);
fprintf('Number of lookups: %d\n', n);
fprintf('Total time: %.6f seconds\n', total_time);
fprintf('Average lookup time: %.6f seconds (%.2f microseconds)\n', ave_time, ave_time * 1e6);







